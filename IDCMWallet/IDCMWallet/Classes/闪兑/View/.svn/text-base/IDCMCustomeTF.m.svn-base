//
//  IDCMCustomeTF.m
//  IDCMExchange
//
//  Created by yhp on 2018/2/12.
//  Copyright © 2018年 BinBear. All rights reserved.
//

#import "IDCMCustomeTF.h"

@interface IDCMCustomeTF (){
    
    
    
    NSTimer * timer;
    
    
}

@end
@implementation IDCMCustomeTF

-(instancetype)initWithCoder:(NSCoder *)aDecoder{
    self = [super initWithCoder:aDecoder];
    
    if (self) {
        
        self.delayValue = 1.0f;
        [self addTarget:self action:@selector(changedTextFieldValue:) forControlEvents:UIControlEventEditingChanged];
        
    }
    return self;
}

-(instancetype)initWithFrame:(CGRect)frame{
    self = [super initWithFrame:frame];
    if (self) {

        self.delayValue = 1.0f;
        [self addTarget:self action:@selector(changedTextFieldValue:) forControlEvents:UIControlEventEditingChanged];

    }
    return self;
}

-(void)setDelayValue:(CGFloat)delayValue{
    
    
    _delayValue = delayValue;
}

-(void)setClearImage:(UIImage *)clearImage{
    
    _clearImage = clearImage;
    
    UIButton * clearButton = [self valueForKey:@"_clearButton"];
    
    [clearButton setImage:[UIImage imageNamed:@"clear"] forState:UIControlStateNormal];
}

-(void)changedTextFieldValue:(UITextField *)textField{
    [timer invalidate];
    timer = nil;
    timer =[NSTimer timerWithTimeInterval:self.delayValue target:self selector:@selector(executeAction:) userInfo:textField.text repeats:NO];
    [[NSRunLoop mainRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];
}


-(void)executeAction:(NSTimer *)value{
    NSString * valueString  = value.userInfo;
    if (self.block) {
        self.block(valueString);
    }
    
    if ([self.delayDelegate respondsToSelector:@selector(textFieldDelayDone:)]) {

        [self.delayDelegate textFieldDelayDone:self];
    }
}
/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/

//控制文本所在的的位置，左右缩 10
- (CGRect)textRectForBounds:(CGRect)bounds
{
    return CGRectInset(bounds, 5, 0);
}

//控制编辑文本时所在的位置，左右缩 10
- (CGRect)editingRectForBounds:(CGRect)bounds
{
    return CGRectInset(bounds, 5, 0);
}
@end
